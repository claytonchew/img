{
  "openapi": "3.0.0",
  "info": {
    "version": "0.2.0",
    "title": "PrimeKeeper Public API",
    "description": "PrimeKeeper Public API Reference"
  },
  "servers": [
    {
      "url": "https://sandbox.api.primekeeper.my",
      "description": "Sandbox Server"
    },
    {
      "url": "https://api.primekeeper.my",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/order": {
      "post": {
        "summary": "Create order",
        "description": "Use this API to create an order (payment request) to customer.",
        "operationId": "createOrder",
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createOrder"
              },
              "examples": {
                "Show & Pay": {
                  "$ref": "#/components/examples/createOrder.showpay"
                },
                "Scan & Pay (Dynamic)": {
                  "$ref": "#/components/examples/createOrder.scanpay.dynamic"
                },
                "Scan & Pay (Static)": {
                  "$ref": "#/components/examples/createOrder.scanpay.static"
                },
                "Checkout & Pay": {
                  "$ref": "#/components/examples/createOrder.checkout"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response.createOrder"
                },
                "examples": {
                  "Show & Pay": {
                    "$ref": "#/components/examples/response.createOrder.showpay"
                  },
                  "Scan & Pay (Dynamic)": {
                    "$ref": "#/components/examples/response.createOrder.scanpay.dynamic"
                  },
                  "Scan & Pay (Static)": {
                    "$ref": "#/components/examples/response.createOrder.scanpay.static"
                  },
                  "Checkout & Pay": {
                    "$ref": "#/components/examples/response.createOrder.checkout"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/order/{orderId}": {
      "get": {
        "summary": "Check order status",
        "description": "Use this API to check the order's trade status.",
        "operationId": "checkOrder",
        "tags": [
          "Payment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response.tradeStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "summary": "Cancel an order",
        "description": "Use this API to cancel the order. Customer wont be able to make payment to this order.",
        "operationId": "cancelOrder",
        "tags": [
          "Payment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response.general"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "security": [
    {
      "apiKey": [

      ],
      "secretKey": [

      ]
    }
  ],
  "components": {
    "parameters": {
      "orderId": {
        "name": "orderId",
        "in": "path",
        "description": "The unique Order ID of the transaction (returned by PrimeKeeper)",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "createOrder": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The billed amount of the order in cent. E.g. 0.10 is `10`.",
            "type": "integer"
          },
          "currency": {
            "description": "The currency of the transaction, in accordance to ISO4217 - 3-digit currency code.",
            "type": "string"
          },
          "paymentMethodType": {
            "description": "The type of Payment Method",
            "type": "string",
            "enum": [
              "SHOWPAY",
              "SCANPAY",
              "CHECKOUT"
            ]
          },
          "paymentMethodMode": {
            "description": "Specify the variation of the specified Payment Method type. Only support `SCANPAY` payment method.",
            "type": "string",
            "enum": [
              "DYNAMIC-QRCODE",
              "STATIC-QRCODE"
            ]
          },
          "requestFrom": {
            "description": "Specify the customer identifier. It can be `PrimeNumber`, `Mobile Number` or `Email`.<br>This is required for `SHOWPAY` or `CHECKOUT` payment method.<br><br>Format: `12345678` for PrimeNumber, `60123456789` for mobile number or `abc@example.com` for email.<br><br>Important Note: If the cashier scans the customer's QR Code or Barcode in the app, the format will always be correct and no validation is required. For manual key in method, ensure that input field validation is enforced to ensure that:<br><br>* Mobile Number – Minimum of 10 numeric characters are required for submission<br>* PrimeNumber – Exactly 8 numeric characters are required for submission",
            "type": "string"
          },
          "expirationPeriod": {
            "description": "Set the expiration period in seconds until the order is cancelled automatically by the system. Maximum time period for an order to stay active is up to 7200 seconds (2 hours). If this is not specified, **system will default to 300 seconds (5 minutes).**",
            "type": "integer"
          },
          "details": {
            "description": "The details of the transaction. This is recommended.",
            "type": "object",
            "properties": {
              "billNumber": {
                "description": "Bill reference number of the order.",
                "type": "string",
                "maxLength": 32
              },
              "items": {
                "description": "Item(s) purchased for this order.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "itemName": {
                      "description": "The name of the item",
                      "type": "string",
                      "maxLength": 32
                    },
                    "itemDesc": {
                      "description": "Description of the item",
                      "type": "string",
                      "maxLength": 64
                    },
                    "quantity": {
                      "description": "The quantity of the item purchased",
                      "type": "integer",
                      "maxLength": 12
                    },
                    "unitPrice": {
                      "description": "Price of the item per unit in cent. E.g. 0.10 is `10`",
                      "type": "integer",
                      "maxLength": 12
                    }
                  }
                }
              },
              "subtotal": {
                "description": "The total price of the items purchased in cent. E.g. 0.10 is `10`",
                "type": "integer"
              },
              "serviceChargeAmount": {
                "description": "The service charge amount in cent. E.g. 0.10 is `10`",
                "type": "integer"
              },
              "serviceChargePercentage": {
                "description": "The percentage of the bill amount being charged for service charge. E.g. 6% is `6`",
                "type": "integer"
              },
              "taxAmount": {
                "description": "The tax amount of the bill in cent. E.g. 0.10 is `10`",
                "type": "integer"
              },
              "taxPercentage": {
                "description": "The percentage of taxable bill amount. E.g. 6% is `6`",
                "type": "integer"
              },
              "rounding": {
                "description": "The rounding amount of the bill. It can be in the following format: `+0.02`, `-0.01`",
                "type": "string"
              },
              "shippingCost": {
                "description": "The shipping cost for this order in cent. E.g. 0.10 is `10`",
                "type": "integer"
              },
              "discount": {
                "description": "The discount amount of the bill offered in cent. E.g. 0.10 is `10`",
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "amount",
          "currency",
          "paymentMethodType"
        ]
      },
      "response.createOrder": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The status of the response.",
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAIL"
            ]
          },
          "orderId": {
            "description": "If the status is `SUCCESS`. Order ID will be given.",
            "type": "string"
          },
          "billedAmount": {
            "description": "If status is `SUCCESS`. The billed amount of the order created will be given.<br>The billed amount will be cent. E.g. 100.00 is `10000`",
            "type": "integer"
          },
          "currency": {
            "description": "If status is `SUCCESS`. Currency of the order will be given, in accordance to ISO4217 - 3-digit currency code.",
            "type": "string"
          },
          "qrCodeString": {
            "description": "If `DYNAMIC-QRCODE` is specified, an unique QR Code string will be given. If `STATIC-QRCODE` is specified, the QR Code string assigned will be given.",
            "type": "string"
          },
          "errorCode": {
            "description": "If status is `FAIL`, error code will be given.",
            "type": "string"
          },
          "errorDesc": {
            "description": "If status if `FAIL`, the description of the error code will be given.",
            "type": "string"
          }
        }
      },
      "response.tradeStatus": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The status of the response.",
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAIL"
            ]
          },
          "tradeStatus": {
            "description": "The trade status for this order.",
            "type": "string",
            "enum": [
              "PAID",
              "CANCELLED",
              "WAITING"
            ]
          },
          "tradeStatusInfo": {
            "description": "The information of the trade status – if any."
          },
          "billedAmount": {
            "description": "The billed amount of the order created will be given.<br>The billed amount will be cent. E.g. 100.00 is `10000`",
            "type": "integer"
          },
          "paidAmount": {
            "description": "If trade status is `PAID`, the paid amount of the order will be given.<br>The paid amount will be in cent. E.g. 100.00 is `10000`",
            "type": "integer"
          },
          "currency": {
            "description": "The currency of the transaction, in accordance to ISO4217 - 3-digit currency code.",
            "type": "string"
          },
          "timestamp": {
            "description": "If trade status is `PAID`, the payment timestamp will be given.",
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "description": "If trade status is `PAID`, the Transaction ID will be given. The Transaction ID is a unique payment reference number for successful transaction.",
            "type": "string"
          },
          "promotion": {
            "description": "If promotional mechanism is used, details of the promotion (e.g. voucher used/earned or discount) will be given.",
            "type": "object",
            "properties": {
              "promoId": {
                "description": "The unique identifier of the promotion campaign.",
                "type": "string"
              },
              "promoName": {
                "description": "The name of the promotion campaign.",
                "type": "string"
              },
              "voucherUsed": {
                "description": "If the customer used voucher as part of the payment, the amount used will be given in cent. E.g. 10.00 is `1000`.",
                "type": "integer"
              },
              "voucherEarned": {
                "description": "If the customer earned voucher from this bill, the amount earned will be given in cent. E.g. 10.00 is `1000`.",
                "type": "integer"
              },
              "promoDisc": {
                "description": "If the customer receive discount (amount payable deducted) for this bill, the amount dicounted will be given in cent. E.g. 10.00 is `1000`.",
                "type": "integer"
              }
            }
          },
          "errorCode": {
            "description": "If status is `FAIL`, error code will be given.",
            "type": "string"
          },
          "errorDesc": {
            "description": "If status if `FAIL`, the description of the error code will be given.",
            "type": "string"
          }
        }
      },
      "response.general": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The status of the response.",
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAIL"
            ]
          },
          "errorCode": {
            "description": "If status is `FAIL`, error code will be given.",
            "type": "string"
          },
          "errorDesc": {
            "description": "If status if `FAIL`, the description of the error code will be given.",
            "type": "string"
          }
        }
      }
    },
    "examples": {
      "createOrder.showpay": {
        "value": {
          "amount": 10600,
          "currency": "MYR",
          "paymentMethodType": "SHOWPAY",
          "requestFrom": "60123456789",
          "expirationPeriod": 300,
          "details": {
            "billNumber": "000000000000",
            "items": [
              {
                "itemName": "Coke",
                "itemDesc": "250ml limited edition",
                "quantity": 50,
                "unitPrice": 100
              },
              {
                "itemName": "Orang Juice",
                "itemDesc": "325ml bottled orange juice",
                "quantity": 50,
                "unitPrice": 100
              }
            ],
            "subtotal": 10000,
            "taxAmount": 600,
            "taxPercentage": 6,
            "rounding": "+0.00",
            "discount": 0
          }
        }
      },
      "createOrder.scanpay.dynamic": {
        "value": {
          "amount": 10600,
          "currency": "MYR",
          "paymentMethodType": "SCANPAY",
          "paymentMethodMode": "DYNAMIC-QRCODE",
          "expirationPeriod": 300,
          "details": {
            "billNumber": "000000000000",
            "items": [
              {
                "itemName": "Coke",
                "itemDesc": "250ml limited edition",
                "quantity": 50,
                "unitPrice": 100
              },
              {
                "itemName": "Orang Juice",
                "itemDesc": "325ml bottled orange juice",
                "quantity": 50,
                "unitPrice": 100
              }
            ],
            "subtotal": 10000,
            "taxAmount": 600,
            "taxPercentage": 6,
            "rounding": "+0.00",
            "discount": 0
          }
        }
      },
      "createOrder.scanpay.static": {
        "value": {
          "amount": 10600,
          "currency": "MYR",
          "paymentMethodType": "SCANPAY",
          "paymentMethodMode": "STATIC-QRCODE",
          "expirationPeriod": 300,
          "details": {
            "billNumber": "000000000000",
            "items": [
              {
                "itemName": "Coke",
                "itemDesc": "250ml limited edition",
                "quantity": 50,
                "unitPrice": 100
              },
              {
                "itemName": "Orang Juice",
                "itemDesc": "325ml bottled orange juice",
                "quantity": 50,
                "unitPrice": 100
              }
            ],
            "subtotal": 10000,
            "taxAmount": 600,
            "taxPercentage": 6,
            "rounding": "+0.00",
            "discount": 0
          }
        }
      },
      "createOrder.checkout": {
        "value": {
          "amount": 11100,
          "currency": "MYR",
          "paymentMethodType": "CHECKOUT",
          "requestFrom": "abc@example.com",
          "expirationPeriod": 300,
          "details": {
            "billNumber": "000000000000",
            "items": [
              {
                "itemName": "Coke",
                "itemDesc": "250ml limited edition",
                "quantity": 50,
                "unitPrice": 100
              },
              {
                "itemName": "Orang Juice",
                "itemDesc": "325ml bottled orange juice",
                "quantity": 50,
                "unitPrice": 100
              }
            ],
            "subtotal": 10000,
            "shippingCost": 500,
            "taxAmount": 600,
            "taxPercentage": 6,
            "rounding": "+0.00",
            "discount": 0
          }
        }
      },
      "response.createOrder.showpay": {
        "value": {
          "status": "SUCCESS",
          "orderId": "0Y2HR95H39D39JR9",
          "billedAmount": 10600,
          "currency": "MYR"
        }
      },
      "response.createOrder.scanpay.dynamic": {
        "value": {
          "status": "SUCCESS",
          "orderId": "0Y2HR95H39D39JR9",
          "billedAmount": 10600,
          "currency": "MYR",
          "qrCodeString": "00020101021226410014A000000615000101065016640209123456789520499995303458540510.005802MY5909QRCSDNBHD6005BANGI6105436506304BFCA"
        }
      },
      "response.createOrder.scanpay.static": {
        "value": {
          "status": "SUCCESS",
          "orderId": "0Y2HR95H39D39JR9",
          "billedAmount": 10600,
          "currency": "MYR",
          "qrCodeString": "00020101021226410014A000000615000101065016640209123456789520499995303458540510.005802MY5909QRCSDNBHD6005BANGI6105436506304BFCA"
        }
      },
      "response.createOrder.checkout": {
        "value": {
          "status": "SUCCESS",
          "orderId": "0Y2HR95H39D39JR9",
          "billedAmount": 11100,
          "currency": "MYR"
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request – The requested parameter is incorrect."
      },
      "401": {
        "description": "Unauthorised – Authorization is invalid."
      },
      "503": {
        "description": "Server Maintenance – Please try again later."
      }
    },
    "securitySchemes": {
      "apiKey": {
        "name": "apiKey",
        "type": "apiKey",
        "in": "header"
      },
      "secretKey": {
        "name": "secretKey",
        "type": "apiKey",
        "in": "header"
      }
    }
  }
}